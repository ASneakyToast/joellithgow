---
// Hero section component with floating elements
export interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
  badgeText?: string;
  ctaText?: string;
  ctaHref?: string;
}

const {
  title = 'Joel Lithgow',
  subtitle = 'I help people think visually',
  description = 'I turn abstract ideas into clear visuals. Whether it\'s a complex process, a new product concept, or a data story - I help make the invisible visible so teams can understand and build together.',
  badgeText = 'creative technologist',
  ctaText = 'view my work',
  ctaHref = '#work'
} = Astro.props;

// Floating elements configuration - matching original positions
const floatingElements = [
  {
    id: 1,
    text: 'currently: building the future',
    class: 'floating-element-1'
  },
  {
    id: 2,
    text: 'status: open to opportunities',
    class: 'floating-element-2'
  },
  {
    id: 3,
    text: 'location: everywhere',
    class: 'floating-element-3'
  }
];
---

<section class="hero" aria-labelledby="hero-heading">
  <div class="hero-content">
    <div class="hero-badge" aria-label="Professional role">{badgeText}</div>
    <h1 id="hero-heading" class="main-title">{title}</h1>
    <p class="subtitle">{subtitle}</p>
    <div class="hero-description">
      {description}
    </div>
    <div class="hero-actions">
      <a href={ctaHref} class="cta-button" aria-describedby="work-cta-description">
        {ctaText}
      </a>
      <div id="work-cta-description" class="sr-only">
        Explore my recent projects and case studies
      </div>
    </div>
  </div>
  
  <!-- Floating Elements -->
  <div class="floating-elements" aria-hidden="true">
    {floatingElements.map((element) => (
      <div 
        class={`floating-element ${element.class}`}
        tabindex="0" 
        role="img" 
        aria-label={`Floating element: ${element.text}`}
      >
        {element.text}
      </div>
    ))}
  </div>
</section>

<style>
  .hero {
    padding: 80px 20px;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
    background: var(--bg-primary);
    overflow: hidden;
  }

  /* Clean Minimal Background Grid */
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      /* Subtle vertical lines */
      linear-gradient(90deg, transparent 79px, var(--gradient-primary-light) 80px, var(--gradient-primary-light) 81px, transparent 82px),
      /* Subtle horizontal lines */
      linear-gradient(transparent 79px, var(--gradient-primary-light) 80px, var(--gradient-primary-light) 81px, transparent 82px);
    background-size: 80px 80px;
    background-position: 0 0;
    animation: gridBreathe 4s ease-in-out infinite, gridDrift 12s ease-in-out infinite;
    z-index: 1;
  }

  /* Minimal Accent Elements */
  .hero::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      /* Single accent dot */
      radial-gradient(circle at 85% 15%, var(--gradient-secondary-medium) 3px, transparent 3px),
      /* Bold visible spiral */
      conic-gradient(from 0deg at 85% 15%, 
        transparent 0deg,
        var(--gradient-primary-medium) 45deg,
        transparent 90deg,
        var(--gradient-secondary-light) 135deg,
        transparent 180deg,
        var(--gradient-tertiary-light) 225deg,
        transparent 270deg,
        var(--gradient-primary-dim) 315deg,
        transparent 360deg);
    background-size: 
      100% 100%,
      1000px 1000px;
    background-position: 
      0 0,
      top right;
    background-repeat: no-repeat;
    opacity: calc(1 - var(--scroll-progress, 0) * 0.8);
    animation: accentPulse 8s ease-in-out infinite, accentFloat 12s ease-in-out infinite;
    z-index: 2;
  }

  /* Enhanced CSS Animations */
  @keyframes gridBreathe {
    0%, 100% { 
      opacity: 1;
      transform: scale(1);
    }
    50% { 
      opacity: 0.4;
      transform: scale(1.02);
    }
  }

  @keyframes gridDrift {
    0% { 
      background-position: 0 0;
    }
    25% { 
      background-position: 20px 20px;
    }
    50% { 
      background-position: 40px 0px;
    }
    75% { 
      background-position: 60px 40px;
    }
    100% { 
      background-position: 80px 80px;
    }
  }

  @keyframes accentPulse {
    0%, 100% { 
      filter: brightness(1) saturate(1);
      transform: scale(1);
    }
    50% { 
      filter: brightness(1.15) saturate(1.1);
      transform: scale(1.02);
    }
  }

  @keyframes accentFloat {
    0%, 100% { 
      transform: translateY(0) translateX(0) rotate(0deg);
    }
    25% { 
      transform: translateY(-8px) translateX(6px) rotate(1deg);
    }
    50% { 
      transform: translateY(-4px) translateX(-6px) rotate(-0.5deg);
    }
    75% { 
      transform: translateY(6px) translateX(8px) rotate(0.8deg);
    }
  }

  .hero-content {
    max-width: 1000px;
    margin: 0 auto;
    position: relative;
    z-index: 10;
  }

  .hero-badge {
    background: var(--accent-primary);
    color: var(--text-light);
    padding: 8px 16px;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 1px;
    border: 2px solid var(--bg-dark);
    transform: rotate(-2deg);
    display: inline-block;
    margin-bottom: 30px;
    font-weight: bold;
  }

  .main-title {
    font-size: clamp(48px, 10vw, 140px);
    font-weight: bold;
    line-height: 1;
    margin: 40px 0;
    color: var(--text-primary);
    text-shadow: 4px 4px 0px var(--accent-secondary);
    transform: skew(-1deg);
  }

  .subtitle {
    font-size: 32px;
    color: var(--text-secondary);
    margin-bottom: 50px;
    transform: rotate(1deg);
    display: inline-block;
  }

  .hero-description {
    font-size: 18px;
    line-height: 1.6;
    color: var(--text-primary);
    max-width: 600px;
    margin-bottom: 40px;
    background: var(--bg-secondary);
    padding: 30px;
    border: 3px solid var(--bg-dark);
    transform: rotate(-1deg);
    box-shadow: 6px 6px 0px var(--accent-tertiary);
  }

  .hero-actions {
    display: flex;
    gap: 30px;
    align-items: flex-start;
    flex-wrap: wrap;
  }

  .cta-button {
    background: var(--accent-primary);
    color: var(--text-light);
    padding: 15px 30px;
    text-decoration: none;
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    border: 3px solid var(--bg-dark);
    transition: all 0.3s ease;
    display: inline-block;
    transform: rotate(2deg);
    box-shadow: 4px 4px 0px var(--accent-secondary);
  }

  .cta-button:hover {
    transform: rotate(2deg) scale(1.05);
    box-shadow: 6px 6px 0px var(--accent-secondary);
  }

  /* Floating Elements Container */
  .floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }

  .floating-element {
    position: absolute;
    pointer-events: all;
    z-index: 10;
    background: var(--accent-tertiary);
    border: 2px solid var(--bg-dark);
    padding: 12px 16px;
    font-size: 11px;
    font-weight: bold;
    color: var(--text-primary);
    cursor: grab;
    user-select: none;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border-radius: 6px;
    box-shadow: 4px 4px 0px var(--accent-primary);
  }

  .floating-element:hover {
    transform: scale(1.1) !important;
    box-shadow: 6px 6px 0px var(--accent-primary);
  }

  .floating-element.dragging {
    transform: rotate(15deg) scale(1.1) !important;
    box-shadow: 8px 8px 0px var(--accent-primary);
  }

  .floating-element:nth-child(2) {
    background: var(--accent-secondary);
    color: var(--text-light);
    box-shadow: 4px 4px 0px var(--accent-tertiary);
  }

  .floating-element:nth-child(2):hover {
    box-shadow: 6px 6px 0px var(--accent-tertiary);
  }

  .floating-element:nth-child(2).dragging {
    box-shadow: 8px 8px 0px var(--accent-tertiary);
  }

  .floating-element:nth-child(3) {
    background: var(--accent-primary);
    color: var(--text-light);
    box-shadow: 4px 4px 0px var(--accent-secondary);
  }

  .floating-element:nth-child(3):hover {
    box-shadow: 6px 6px 0px var(--accent-secondary);
  }

  .floating-element:nth-child(3).dragging {
    box-shadow: 8px 8px 0px var(--accent-secondary);
  }

  .floating-element-1 {
    top: 15%;
    right: 15%;
    transform: rotate(12deg);
  }

  .floating-element-2 {
    bottom: 25%;
    left: 10%;
    transform: rotate(-8deg);
  }

  .floating-element-3 {
    top: 60%;
    right: 5%;
    transform: rotate(15deg);
  }

  /* Screen reader only styles */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .hero {
      padding: 60px 20px;
    }

    .hero::before {
      background-size: 60px 60px; /* Larger grid on mobile for better visibility */
    }
    
    /* Hide all floating chips on mobile */
    .floating-elements {
      display: none;
    }

    .hero-actions {
      gap: 16px;
    }

    .main-title {
      font-size: clamp(36px, 8vw, 80px);
    }

    .subtitle {
      font-size: 24px;
    }

    .hero-description {
      font-size: 16px;
      padding: 20px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .hero::before,
    .hero::after {
      animation: none !important;
      transform: none !important;
      filter: none !important;
    }
    
    .cta-button:hover {
      transform: scale(1.02);
    }
    
    .floating-element:hover {
      transform: scale(1.05) !important;
    }
  }
</style>

<script>
  // Enhanced floating elements with dragging functionality
  document.addEventListener('DOMContentLoaded', () => {
    const floatingElements = document.querySelectorAll('.floating-element');
    
    // Make floating elements draggable
    floatingElements.forEach(element => {
      let isDragging = false;
      let startX = 0;
      let startY = 0;
      let currentX = 0;
      let currentY = 0;
      // Store initial transform to preserve rotation (for future use)
      // const initialTransform = window.getComputedStyle(element).transform;
      
      function handleStart(e: MouseEvent | TouchEvent) {
        isDragging = true;
        element.classList.add('dragging');
        
        const clientX = (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX;
        const clientY = (e as MouseEvent).clientY || (e as TouchEvent).touches[0].clientY;
        
        // Get current position more accurately
        const rect = element.getBoundingClientRect();
        
        // Calculate offset from mouse to element's top-left corner
        startX = clientX - rect.left;
        startY = clientY - rect.top;
        
        // Store the current computed transform to preserve rotation
        const computedStyle = window.getComputedStyle(element);
        const currentTransform = computedStyle.transform;
        
        // Convert element to fixed positioning to avoid parent container issues
        currentX = rect.left;
        currentY = rect.top;
        
        (element as HTMLElement).style.position = 'fixed';
        (element as HTMLElement).style.left = currentX + 'px';
        (element as HTMLElement).style.top = currentY + 'px';
        (element as HTMLElement).style.right = 'auto';
        (element as HTMLElement).style.bottom = 'auto';
        (element as HTMLElement).style.margin = '0';
        (element as HTMLElement).style.transform = currentTransform; // Preserve rotation
        (element as HTMLElement).style.zIndex = '1000'; // Bring to front while dragging
        
        // Prevent text selection and default behaviors
        e.preventDefault();
        e.stopPropagation();
      }
      
      function handleMove(e: MouseEvent | TouchEvent) {
        if (!isDragging) return;
        
        e.preventDefault();
        
        const clientX = (e as MouseEvent).clientX || (e as TouchEvent).touches[0].clientX;
        const clientY = (e as MouseEvent).clientY || (e as TouchEvent).touches[0].clientY;
        
        // Calculate new position
        const newX = clientX - startX;
        const newY = clientY - startY;
        
        // Constrain to viewport with padding
        const padding = 10;
        const maxX = window.innerWidth - (element as HTMLElement).offsetWidth - padding;
        const maxY = window.innerHeight - (element as HTMLElement).offsetHeight - padding;
        
        currentX = Math.max(padding, Math.min(newX, maxX));
        currentY = Math.max(padding, Math.min(newY, maxY));
        
        // Apply position with transform preserved
        (element as HTMLElement).style.left = currentX + 'px';
        (element as HTMLElement).style.top = currentY + 'px';
      }
      
      function handleEnd() {
        if (!isDragging) return;
        
        isDragging = false;
        element.classList.remove('dragging');
        
        // Convert back to absolute positioning within parent container
        const parentRect = (element.parentElement as HTMLElement).getBoundingClientRect();
        const elementRect = element.getBoundingClientRect();
        
        // Calculate position relative to parent
        const relativeX = elementRect.left - parentRect.left;
        const relativeY = elementRect.top - parentRect.top;
        
        // Convert to absolute positioning within parent
        (element as HTMLElement).style.position = 'absolute';
        (element as HTMLElement).style.left = relativeX + 'px';
        (element as HTMLElement).style.top = relativeY + 'px';
        (element as HTMLElement).style.right = 'auto';
        (element as HTMLElement).style.bottom = 'auto';
        (element as HTMLElement).style.zIndex = '10'; // Reset to normal z-index
      }
      
      // Mouse events
      element.addEventListener('mousedown', handleStart as EventListener, { passive: false });
      document.addEventListener('mousemove', handleMove as EventListener, { passive: false });
      document.addEventListener('mouseup', handleEnd);
      
      // Touch events  
      element.addEventListener('touchstart', handleStart as EventListener, { passive: false });
      document.addEventListener('touchmove', handleMove as EventListener, { passive: false });
      document.addEventListener('touchend', handleEnd);
      
      // Prevent context menu on long press
      element.addEventListener('contextmenu', e => e.preventDefault());
    });

    // Smooth scroll for CTA button
    const ctaButton = document.querySelector('.cta-button');
    if (ctaButton) {
      ctaButton.addEventListener('click', (e) => {
        const href = ctaButton.getAttribute('href');
        if (href && href.startsWith('#')) {
          e.preventDefault();
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    }
  });
</script>