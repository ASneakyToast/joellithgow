---
// Keyboard Shortcuts and Accessibility Component
// Provides global keyboard shortcuts and accessibility enhancements
---

<div id="keyboard-shortcuts-info" class="sr-only" aria-live="polite">
  <div>Keyboard shortcuts available: Ctrl+T to cycle themes, Escape to close modals, Enter/Space to activate buttons</div>
</div>

<style>
  /* sr-only class is defined globally in BaseLayout */

  /* Enhanced focus styles for all interactive elements */
  :global(button:focus),
  :global(a:focus),
  :global(input:focus),
  :global(select:focus),
  :global(textarea:focus),
  :global([tabindex]:focus) {
    outline: 3px solid var(--accent-primary);
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* High contrast focus for better visibility */
  @media (prefers-contrast: high) {
    :global(button:focus),
    :global(a:focus),
    :global(input:focus),
    :global(select:focus),
    :global(textarea:focus),
    :global([tabindex]:focus) {
      outline: 4px solid var(--accent-primary);
      outline-offset: 3px;
      background: var(--bg-secondary);
    }
  }

  /* Ensure draggable elements have proper focus styles */
  :global(.floating-element:focus) {
    outline: 3px solid var(--accent-primary);
    outline-offset: 2px;
    box-shadow: 0 0 0 6px rgba(255, 255, 255, 0.3);
  }

  /* Modal focus trap styles */
  :global(.theme-modal:not(.hidden)),
  :global(.case-study-modal:not(.hidden)) {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10000;
  }

  /* Announce theme changes to screen readers */
  .theme-announcement {
    position: absolute;
    left: -10000px;
    width: 1px;
    height: 1px;
    overflow: hidden;
  }
</style>

<!-- Client-side JavaScript for keyboard shortcuts and accessibility -->
<script>
  class AccessibilityManager {
    constructor() {
      this.currentTheme = 'default';
      this.shortcuts = new Map();
      this.focusTraps = new Map();
      this.init();
    }

    init() {
      this.setupGlobalKeyboardShortcuts();
      this.setupFocusManagement();
      this.setupThemeAnnouncements();
      this.setupModalFocusTraps();
      this.setupAccessibilityFeatures();
    }

    setupGlobalKeyboardShortcuts() {
      // Register global keyboard shortcuts
      this.shortcuts.set('ctrl+t', () => this.cycleTheme());
      this.shortcuts.set('cmd+t', () => this.cycleTheme());
      this.shortcuts.set('escape', () => this.closeModals());
      this.shortcuts.set('ctrl+/', () => this.showKeyboardHelp());
      this.shortcuts.set('cmd+/', () => this.showKeyboardHelp());

      // Global keyboard listener
      document.addEventListener('keydown', (e) => {
        const key = this.getKeyboardShortcut(e);
        const handler = this.shortcuts.get(key);
        
        if (handler) {
          e.preventDefault();
          handler();
        }

        // Handle tab navigation in modals
        if (e.key === 'Tab') {
          this.handleTabNavigation(e);
        }
      });
    }

    getKeyboardShortcut(e) {
      const modifiers = [];
      if (e.ctrlKey) modifiers.push('ctrl');
      if (e.metaKey) modifiers.push('cmd');
      if (e.altKey) modifiers.push('alt');
      if (e.shiftKey) modifiers.push('shift');
      
      const key = e.key.toLowerCase();
      return modifiers.length > 0 ? `${modifiers.join('+')}+${key}` : key;
    }

    cycleTheme() {
      const themes = ['default', 'electric', 'retro', 'system', 'high-contrast', 'minimal', 'neon'];
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'default';
      const currentIndex = themes.indexOf(currentTheme);
      const nextIndex = (currentIndex + 1) % themes.length;
      const nextTheme = themes[nextIndex];
      
      document.documentElement.setAttribute('data-theme', nextTheme);
      localStorage.setItem('portfolio-theme', nextTheme);
      
      // Announce theme change to screen readers
      this.announceThemeChange(nextTheme);
      
      // Dispatch theme change event
      window.dispatchEvent(new CustomEvent('themeChange', { detail: nextTheme }));
    }

    closeModals() {
      // Close all open modals
      const modals = document.querySelectorAll('.theme-modal, .case-study-modal, .game-overlay');
      modals.forEach(modal => {
        if (!modal.classList.contains('hidden')) {
          modal.classList.add('hidden');
          
          // Return focus to the element that opened the modal
          const opener = this.focusTraps.get(modal.id);
          if (opener) {
            opener.focus();
            this.focusTraps.delete(modal.id);
          }
        }
      });

      // Close any global modal functions
      if (window.closeThemeModal) {
        window.closeThemeModal();
      }
      if (window.caseStudyModal) {
        window.caseStudyModal.close();
      }
    }

    showKeyboardHelp() {
      // Create or show keyboard shortcuts help
      let helpModal = document.getElementById('keyboard-help-modal');
      
      if (!helpModal) {
        helpModal = this.createKeyboardHelpModal();
        document.body.appendChild(helpModal);
      }
      
      helpModal.classList.remove('hidden');
      
      // Focus on first interactive element
      const firstFocusable = helpModal.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
      if (firstFocusable) {
        firstFocusable.focus();
      }
    }

    createKeyboardHelpModal() {
      const modal = document.createElement('div');
      modal.id = 'keyboard-help-modal';
      modal.className = 'theme-modal hidden';
      modal.setAttribute('role', 'dialog');
      modal.setAttribute('aria-labelledby', 'keyboard-help-title');
      modal.setAttribute('aria-modal', 'true');
      
      modal.innerHTML = `
        <div class="theme-modal-content">
          <div class="theme-modal-header">
            <h3 id="keyboard-help-title">Keyboard Shortcuts</h3>
            <button class="theme-modal-close" aria-label="Close keyboard shortcuts help">&times;</button>
          </div>
          <div class="keyboard-shortcuts-list">
            <div class="shortcut-item">
              <kbd>Ctrl</kbd> + <kbd>T</kbd> <span>Cycle themes</span>
            </div>
            <div class="shortcut-item">
              <kbd>Escape</kbd> <span>Close modals and overlays</span>
            </div>
            <div class="shortcut-item">
              <kbd>Ctrl</kbd> + <kbd>/</kbd> <span>Show this help</span>
            </div>
            <div class="shortcut-item">
              <kbd>Tab</kbd> <span>Navigate between interactive elements</span>
            </div>
            <div class="shortcut-item">
              <kbd>Enter</kbd> / <kbd>Space</kbd> <span>Activate buttons and links</span>
            </div>
            <div class="shortcut-item">
              <kbd>↑↓←→</kbd> <span>Navigate Snake game</span>
            </div>
          </div>
        </div>
      `;

      // Add event listeners
      const closeBtn = modal.querySelector('.theme-modal-close');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          modal.classList.add('hidden');
        });
      }

      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
        }
      });

      return modal;
    }

    setupFocusManagement() {
      // Enhance focus management for interactive elements
      document.addEventListener('focusin', (e) => {
        const target = e.target;
        
        // Add visual feedback for focused elements
        if (target.classList.contains('floating-element')) {
          target.style.boxShadow = '0 0 0 3px var(--accent-primary)';
        }
      });

      document.addEventListener('focusout', (e) => {
        const target = e.target;
        
        // Remove visual feedback
        if (target.classList.contains('floating-element')) {
          target.style.boxShadow = '';
        }
      });
    }

    setupThemeAnnouncements() {
      // Create announcement element for screen readers
      const announcer = document.createElement('div');
      announcer.id = 'theme-announcer';
      announcer.className = 'sr-only';
      announcer.setAttribute('aria-live', 'polite');
      announcer.setAttribute('aria-atomic', 'true');
      document.body.appendChild(announcer);
    }

    announceThemeChange(theme) {
      const announcer = document.getElementById('theme-announcer');
      if (announcer) {
        announcer.textContent = `Theme changed to ${theme}`;
      }
    }

    setupModalFocusTraps() {
      // Set up focus trapping for modals
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            const target = mutation.target;
            
            if (target.classList.contains('theme-modal') || 
                target.classList.contains('case-study-modal')) {
              
              if (!target.classList.contains('hidden')) {
                // Modal opened - set up focus trap
                this.setupFocusTrap(target);
              }
            }
          }
        });
      });

      // Observe all modals
      const modals = document.querySelectorAll('.theme-modal, .case-study-modal, .game-overlay');
      modals.forEach(modal => {
        observer.observe(modal, { attributes: true, attributeFilter: ['class'] });
      });
    }

    setupFocusTrap(modal) {
      // Store the currently focused element
      const activeElement = document.activeElement;
      if (activeElement && modal.id) {
        this.focusTraps.set(modal.id, activeElement);
      }

      // Find all focusable elements within the modal
      const focusableElements = modal.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      );

      if (focusableElements.length > 0) {
        // Focus the first element
        focusableElements[0].focus();

        // Set up tab cycling
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];

        modal.addEventListener('keydown', (e) => {
          if (e.key === 'Tab') {
            if (e.shiftKey) {
              if (document.activeElement === firstElement) {
                e.preventDefault();
                lastElement.focus();
              }
            } else {
              if (document.activeElement === lastElement) {
                e.preventDefault();
                firstElement.focus();
              }
            }
          }
        });
      }
    }

    handleTabNavigation(e) {
      // Enhanced tab navigation for better UX
      const activeElement = document.activeElement;
      
      // Skip invisible or disabled elements
      if (activeElement && (
        activeElement.style.visibility === 'hidden' ||
        activeElement.style.display === 'none' ||
        activeElement.hasAttribute('disabled')
      )) {
        const focusableElements = document.querySelectorAll(
          'button:not([disabled]), [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"]):not([disabled])'
        );
        
        const currentIndex = Array.from(focusableElements).indexOf(activeElement);
        const nextIndex = e.shiftKey ? currentIndex - 1 : currentIndex + 1;
        
        if (nextIndex >= 0 && nextIndex < focusableElements.length) {
          e.preventDefault();
          focusableElements[nextIndex].focus();
        }
      }
    }

    setupAccessibilityFeatures() {
      // Enhance accessibility for draggable elements
      const draggableElements = document.querySelectorAll('.floating-element');
      
      draggableElements.forEach(element => {
        // Make draggable elements keyboard accessible
        if (!element.hasAttribute('tabindex')) {
          element.setAttribute('tabindex', '0');
        }
        
        // Add ARIA labels
        if (!element.hasAttribute('aria-label')) {
          element.setAttribute('aria-label', `Draggable element: ${element.textContent || 'floating element'}`);
        }
        
        // Add keyboard controls for draggable elements
        element.addEventListener('keydown', (e) => {
          const step = e.shiftKey ? 50 : 10;
          let moved = false;
          
          switch (e.key) {
            case 'ArrowLeft':
              e.preventDefault();
              this.moveElement(element, -step, 0);
              moved = true;
              break;
            case 'ArrowRight':
              e.preventDefault();
              this.moveElement(element, step, 0);
              moved = true;
              break;
            case 'ArrowUp':
              e.preventDefault();
              this.moveElement(element, 0, -step);
              moved = true;
              break;
            case 'ArrowDown':
              e.preventDefault();
              this.moveElement(element, 0, step);
              moved = true;
              break;
          }
          
          if (moved) {
            // Announce movement to screen readers
            const announcer = document.getElementById('theme-announcer');
            if (announcer) {
              announcer.textContent = `Element moved`;
            }
          }
        });
      });
    }

    moveElement(element, deltaX, deltaY) {
      const rect = element.getBoundingClientRect();
      const newX = rect.left + deltaX;
      const newY = rect.top + deltaY;
      
      // Constrain to viewport
      const padding = 10;
      const maxX = window.innerWidth - rect.width - padding;
      const maxY = window.innerHeight - rect.height - padding;
      
      const constrainedX = Math.max(padding, Math.min(newX, maxX));
      const constrainedY = Math.max(padding, Math.min(newY, maxY));
      
      element.style.position = 'fixed';
      element.style.left = `${constrainedX}px`;
      element.style.top = `${constrainedY}px`;
      element.style.zIndex = '1000';
    }
  }

  // Initialize accessibility manager
  const accessibilityManager = new AccessibilityManager();

  // Make it globally available
  window.accessibilityManager = accessibilityManager;
</script>

<style>
  /* Keyboard shortcuts help modal styles */
  :global(.keyboard-shortcuts-list) {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
  }

  :global(.shortcut-item) {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 10px;
    background: var(--bg-primary);
    border-radius: 8px;
    border: 1px solid var(--accent-primary);
  }

  :global(.shortcut-item kbd) {
    background: var(--accent-primary);
    color: var(--text-light);
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    border: 1px solid var(--bg-dark);
    box-shadow: 0 2px 0 var(--bg-dark);
  }

  :global(.shortcut-item span) {
    color: var(--text-primary);
    font-size: 14px;
  }

  /* Enhanced focus indicators for dark themes */
  @media (prefers-color-scheme: dark) {
    :global(button:focus),
    :global(a:focus),
    :global(input:focus),
    :global(select:focus),
    :global(textarea:focus),
    :global([tabindex]:focus) {
      outline-color: var(--accent-secondary);
      box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.2);
    }
  }
</style>