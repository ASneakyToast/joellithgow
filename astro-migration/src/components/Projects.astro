---
// Projects section component using content collections
import { getCollection } from 'astro:content';

export interface Props {
  sectionTitle?: string;
  sectionSubtitle?: string;
  featuredOnly?: boolean;
  limit?: number;
}

const {
  sectionTitle = 'selected work',
  sectionSubtitle = 'Recent projects and case studies',
  featuredOnly = true,
  limit
} = Astro.props;

// Get projects from content collection
const allProjects = await getCollection('projects');
let projects = featuredOnly ? allProjects.filter(project => project.data.featured) : allProjects;

// Sort by number (ascending)
projects = projects.sort((a, b) => a.data.number - b.data.number);

// Apply limit if specified
if (limit && limit > 0) {
  projects = projects.slice(0, limit);
}
---

<section id="work" class="projects" aria-labelledby="projects-heading">
  <header class="section-header">
    <h2 id="projects-heading" class="section-title">{sectionTitle}</h2>
    <p class="section-subtitle">{sectionSubtitle}</p>
  </header>
  
  <div class="projects-container" role="list" aria-label="Project portfolio">
    {projects.map((project) => (
      <article class="project-card" role="listitem">
        <div class="project-number">{project.data.number}</div>
        <div class="project-type">{project.data.type}</div>
        <h3 class="project-title">{project.data.title}</h3>
        <p class="project-description">{project.data.description}</p>
        <div class="project-technologies">
          {project.data.technologies.map((tech) => (
            <span class="tech-tag">{tech}</span>
          ))}
        </div>
        <div class="project-impact">{project.data.impact}</div>
        {project.data.url && (
          <div class="project-actions">
            <a 
              href={project.data.url} 
              class="project-link"
              target="_blank"
              rel="noopener noreferrer"
              aria-label={`View ${project.data.title} project`}
            >
              view project â†’
            </a>
          </div>
        )}
      </article>
    ))}
  </div>
  
  {projects.length === 0 && (
    <div class="no-projects">
      <p>No projects found.</p>
    </div>
  )}
</section>

<style>
  .projects {
    padding: 100px 0;
    background: var(--bg-secondary);
    border-top: 5px solid var(--accent-primary);
    position: relative; /* Enable positioning context for gradients */
  }

  .section-header {
    max-width: 1000px;
    margin: 0 auto 80px;
    text-align: center;
  }

  .section-title {
    font-size: 48px;
    color: var(--text-primary);
    margin-bottom: 20px;
    text-decoration: underline;
    text-decoration-color: var(--accent-primary);
    text-decoration-thickness: 4px;
    transform: skew(-2deg);
  }

  .section-subtitle {
    font-size: 16px;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 2px;
  }

  .projects-container {
    width: 100%;
    margin: 0 auto;
    display: flex;
    align-items: flex-start;
    overflow-x: auto;
    overflow-y: hidden;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    gap: 40px;
    padding: 40px 20px; /* Increased top/bottom padding for scaled cards */
    padding-right: 40px; /* Extra padding for last item */
    scroll-padding-left: 20px;
    position: relative;
  }

  /* Custom scrollbar styling */
  .projects-container::-webkit-scrollbar {
    height: 8px;
  }

  .projects-container::-webkit-scrollbar-track {
    background: var(--bg-secondary);
    border-radius: 4px;
    margin: 0 20px;
  }

  .projects-container::-webkit-scrollbar-thumb {
    background: var(--accent-primary);
    border-radius: 4px;
    border: 2px solid var(--bg-secondary);
  }

  .projects-container::-webkit-scrollbar-thumb:hover {
    background: var(--accent-secondary);
  }

  /* Scroll fade indicators - positioned on parent section to stay fixed */
  .projects::before,
  .projects::after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 40px;
    pointer-events: none;
    z-index: 10;
  }

  .projects::before {
    left: 0;
    background: linear-gradient(to right, var(--bg-secondary) 0%, transparent 100%);
  }

  .projects::after {
    right: 0;
    background: linear-gradient(to left, var(--bg-secondary) 0%, transparent 100%);
  }

  .project-card {
    background: var(--bg-primary);
    border: 3px solid var(--bg-dark);
    transition: all 0.4s ease;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    flex: 0 0 450px; /* Fixed width for carousel - wider for overflow hint */
    scroll-snap-align: start;
    scroll-snap-stop: always;
  }

  .project-card:nth-child(odd) {
    transform: rotate(0.5deg);
  }

  .project-card:nth-child(even) {
    transform: rotate(-0.5deg);
  }

  .project-card:hover {
    transform: scale(1.05);
    box-shadow: 12px 12px 0px var(--accent-secondary);
    z-index: 5;
  }

  .project-number {
    font-size: 14px;
    background: var(--accent-primary);
    padding: 6px 12px;
    border: 2px solid var(--text-light);
    font-weight: bold;
    color: var(--text-light);
    display: inline-block;
    margin-bottom: 16px;
  }

  .project-type {
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 1px;
    opacity: 0.8;
    color: var(--text-secondary);
    margin-bottom: 8px;
  }

  .project-title {
    font-size: 24px;
    margin-bottom: 15px;
    color: var(--text-primary);
    font-weight: bold;
  }

  .project-description {
    font-size: 15px;
    line-height: 1.5;
    margin-bottom: 20px;
    color: var(--text-secondary);
  }

  .project-technologies {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 20px;
  }

  .tech-tag {
    background: var(--accent-tertiary);
    color: var(--text-primary);
    padding: 6px 12px;
    font-size: 11px;
    text-transform: uppercase;
    letter-spacing: 1px;
    border: 1px solid var(--bg-dark);
    font-weight: bold;
  }

  .project-impact {
    background: var(--accent-secondary);
    color: var(--text-light);
    padding: 15px;
    transform: rotate(-1deg);
    border: 2px solid var(--bg-dark);
    margin-top: 15px;
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
  }

  .project-actions {
    margin-top: 20px;
  }

  .project-link {
    color: var(--accent-secondary);
    text-decoration: none;
    font-weight: 600;
    font-size: 1rem;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 8px;
  }

  .project-link:hover {
    color: var(--accent-primary);
    transform: translateX(4px);
  }

  .no-projects {
    text-align: center;
    padding: 60px 20px;
    color: var(--text-secondary);
    font-size: 1.1rem;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .projects {
      padding: 60px 0;
    }

    .section-header {
      margin-bottom: 40px;
      padding: 0 20px;
    }

    .section-title {
      font-size: 36px;
    }

    .projects-container {
      flex-direction: column;
      overflow-x: visible;
      scroll-snap-type: none;
      padding: 20px;
    }

    .project-card {
      flex: none;
      width: 100%;
    }

    .projects::before,
    .projects::after {
      display: none;
    }
  }

  /* Enhanced accessibility */
  @media (prefers-reduced-motion: reduce) {
    .projects-container {
      scroll-behavior: auto;
      scroll-snap-type: none;
    }
    
    .project-card {
      scroll-snap-align: none;
      scroll-snap-stop: normal;
    }
    
    .project-card:hover {
      transform: scale(1.02);
    }
    
    .project-link:hover {
      transform: translateX(2px);
    }
  }

  /* Focus styles */
  .project-link:focus {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
    border-radius: 4px;
  }

  .tech-tag:focus {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
  }
</style>

<script>
  // Enhanced project card interactions
  document.addEventListener('DOMContentLoaded', () => {
    const projectCards = document.querySelectorAll('.project-card');
    
    projectCards.forEach(card => {
      // Add keyboard navigation for project cards
      card.addEventListener('keydown', (e) => {
        if ((e as KeyboardEvent).key === 'Enter' || (e as KeyboardEvent).key === ' ') {
          const projectLink = card.querySelector('.project-link');
          if (projectLink) {
            e.preventDefault();
            (projectLink as HTMLElement).click();
          }
        }
      });

      // Add focus styles for keyboard navigation
      card.addEventListener('focus', () => {
        (card as HTMLElement).style.outline = '2px solid var(--accent-primary)';
        (card as HTMLElement).style.outlineOffset = '2px';
      });

      card.addEventListener('blur', () => {
        (card as HTMLElement).style.outline = 'none';
      });
    });

    // Intersection Observer for animation on scroll
    if ('IntersectionObserver' in window) {
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            (entry.target as HTMLElement).style.opacity = '1';
            (entry.target as HTMLElement).style.transform = 'translateY(0)';
          }
        });
      }, observerOptions);

      projectCards.forEach(card => {
        (card as HTMLElement).style.opacity = '0';
        (card as HTMLElement).style.transform = 'translateY(20px)';
        (card as HTMLElement).style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(card);
      });
    }
  });
</script>