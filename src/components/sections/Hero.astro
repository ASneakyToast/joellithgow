---
// Hero section component with floating elements
export interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
  badgeText?: string;
  ctaText?: string;
  ctaHref?: string;
}

const {
  title = 'Joel Lithgow',
  subtitle = 'I help people think visually',
  description = 'I turn abstract ideas into clear visuals. Whether it\'s a complex process, a new product concept, or a data story - I help make the invisible visible so teams can understand and build together.',
  badgeText = 'creative technologist',
  ctaText = 'view my work',
  ctaHref = '#work'
} = Astro.props;

// Decorative geometric elements configuration
const decorativeElements = [
  {
    id: 1,
    class: 'decorative-element-1',
    shape: 'circle'
  },
  {
    id: 2,
    class: 'decorative-element-2',
    shape: 'rect'
  },
  {
    id: 3,
    class: 'decorative-element-3',
    shape: 'line'
  }
];
---

<section class="hero" aria-labelledby="hero-heading">
  <div class="hero-content">
    <h1 id="hero-heading" class="main-title">{title}</h1>
    <p class="subtitle">{subtitle}</p>
    <div class="hero-actions">
      <a href={ctaHref} class="cta-button" aria-describedby="work-cta-description">
        {ctaText}
      </a>
      <button
        id="themeControl"
        class="theme-control"
        aria-label="Open theme selector"
        aria-expanded="false"
        aria-controls="themeModal"
        title="Press Ctrl+T to cycle themes">
        <div class="theme-control-text">
          <span aria-hidden="true">âš™</span>
          <span>themes</span>
        </div>
      </button>
      <div id="work-cta-description" class="sr-only">
        Explore my recent projects and case studies
      </div>
    </div>
  </div>
  
  <!-- Decorative Geometric Elements -->
  <div class="decorative-elements" aria-hidden="true">
    {decorativeElements.map((element) => (
      <div class={`decorative-element ${element.class}`} data-shape={element.shape}></div>
    ))}
  </div>
</section>

<style>
  .hero {
    padding: 4vh 20px;
    height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
    background: var(--bg-primary);
    overflow: hidden;
    box-sizing: border-box;
  }

  /* Clean Minimal Background Grid */
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      /* Subtle vertical lines */
      linear-gradient(90deg, transparent 79px, var(--gradient-primary-light) 80px, var(--gradient-primary-light) 81px, transparent 82px),
      /* Subtle horizontal lines */
      linear-gradient(transparent 79px, var(--gradient-primary-light) 80px, var(--gradient-primary-light) 81px, transparent 82px);
    background-size: 80px 80px;
    background-position: 0 0;
    animation: gridBreathe 4s ease-in-out infinite, gridDrift 12s ease-in-out infinite;
    z-index: 1;
  }

  /* Minimal Accent Elements */
  .hero::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image:
      /* Single accent dot */
      radial-gradient(circle at 85% 15%, var(--gradient-secondary-medium) 3px, transparent 3px),
      /* Bold visible spiral */
      conic-gradient(from 0deg at 85% 15%,
        transparent 0deg,
        var(--gradient-primary-medium) 45deg,
        transparent 90deg,
        var(--gradient-secondary-light) 135deg,
        transparent 180deg,
        var(--gradient-tertiary-light) 225deg,
        transparent 270deg,
        var(--gradient-primary-dim) 315deg,
        transparent 360deg);
    background-size:
      100% 100%,
      1000px 1000px;
    background-position:
      0 0,
      top right;
    background-repeat: no-repeat;
    opacity: calc(1 - var(--scroll-progress, 0) * 0.8);
    animation: accentPulse 8s ease-in-out infinite, accentFloat 12s ease-in-out infinite;
    z-index: 2;
  }

  /* Hide accent spiral in minimal theme */
  :global([data-theme="minimal"]) .hero::after {
    display: none !important;
    opacity: 0 !important;
  }

  /* Enhanced CSS Animations */
  @keyframes gridBreathe {
    0%, 100% { 
      opacity: 1;
      transform: scale(1);
    }
    50% { 
      opacity: 0.4;
      transform: scale(1.02);
    }
  }

  @keyframes gridDrift {
    0% { 
      background-position: 0 0;
    }
    25% { 
      background-position: 20px 20px;
    }
    50% { 
      background-position: 40px 0px;
    }
    75% { 
      background-position: 60px 40px;
    }
    100% { 
      background-position: 80px 80px;
    }
  }

  @keyframes accentPulse {
    0%, 100% { 
      filter: brightness(1) saturate(1);
      transform: scale(1);
    }
    50% { 
      filter: brightness(1.15) saturate(1.1);
      transform: scale(1.02);
    }
  }

  @keyframes accentFloat {
    0%, 100% { 
      transform: translateY(0) translateX(0) rotate(0deg);
    }
    25% { 
      transform: translateY(-8px) translateX(6px) rotate(1deg);
    }
    50% { 
      transform: translateY(-4px) translateX(-6px) rotate(-0.5deg);
    }
    75% { 
      transform: translateY(6px) translateX(8px) rotate(0.8deg);
    }
  }

  .hero-content {
    width: 80vw;
    margin: 0 auto;
    position: relative;
    z-index: 10;
  }

  .main-title {
    font-size: clamp(40px, 8vw, 100px);
    font-weight: bold;
    line-height: 1;
    margin: 2.5vh 0;
    color: var(--text-primary);
    text-shadow: var(--text-shadow) var(--accent-secondary);
    transform: var(--rotation-lg);
  }

  .subtitle {
    font-size: 1.75rem;
    color: var(--text-secondary);
    margin-bottom: 7vh;
    transform: var(--rotation-sm);
    display: inline-block;
  }

  .hero-actions {
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
    flex-wrap: wrap;
  }

  .cta-button {
    background: var(--accent-primary);
    color: var(--text-light);
    padding: 15px 30px;
    text-decoration: none;
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    border: var(--border-width) solid var(--bg-dark);
    border-radius: var(--border-radius);
    transition: all 0.3s ease;
    display: inline-block;
    transform: var(--rotation-md);
    box-shadow: var(--shadow-md) var(--accent-secondary);
  }

  .cta-button:hover {
    transform: var(--rotation-md) scale(1.05);
    box-shadow: var(--shadow-lg) var(--accent-secondary);
  }

  .theme-control {
    background: white;
    color: var(--accent-primary);
    padding: 15px 30px;
    border: var(--border-width) solid var(--accent-primary);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-md) var(--accent-secondary);
    font-family: inherit;
    transform: var(--rotation-md);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .theme-control:hover {
    background: var(--accent-primary);
    color: white;
    transform: var(--rotation-md) scale(1.05);
    box-shadow: var(--shadow-lg) var(--accent-secondary);
  }

  .theme-control-text {
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .theme-control-text span:first-child {
    font-size: 16px;
  }

  /* Decorative Elements Container */
  .decorative-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10;
  }

  .decorative-element {
    position: absolute;
    pointer-events: none;
    user-select: none;
  }

  /* Circle - wireframe style */
  .decorative-element-1 {
    top: 15%;
    right: 20%;
    width: 200px;
    height: 200px;
    border: calc(var(--border-width) + 1px) dashed var(--accent-primary);
    border-radius: 50%;
    transform: rotate(12deg);
    opacity: 0.6;
  }

  /* Rectangle - split diagonal with contrasting sections */
  .decorative-element-2 {
    top: 55%;
    left: 5%;
    width: 140px;
    height: 140px;
    background: linear-gradient(135deg, var(--accent-secondary) 50%, transparent 50%);
    opacity: 0.4;
    transform: rotate(-15deg);
    border: var(--border-width) solid var(--accent-secondary);
  }

  /* Line element - diagonal line */
  .decorative-element-3 {
    bottom: 20%;
    right: 10%;
    width: 250px;
    height: 4px;
    background: var(--accent-tertiary);
    transform: rotate(25deg);
    opacity: 0.5;
  }

  .decorative-element-3::before {
    content: '';
    position: absolute;
    top: -30px;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--accent-tertiary);
    opacity: 0.7;
  }

  .decorative-element-3::after {
    content: '';
    position: absolute;
    top: 30px;
    left: 30px;
    width: 80%;
    height: 4px;
    background: var(--accent-tertiary);
    opacity: 0.4;
  }

  /* Screen reader only styles - sr-only class is defined globally in BaseLayout */

  /* Responsive design */
  @media (max-width: 768px) {
    .hero {
      padding: 60px 20px;
    }

    .hero::before {
      background-size: 60px 60px; /* Larger grid on mobile for better visibility */
    }
    
    /* Hide decorative elements on mobile */
    .decorative-elements {
      display: none;
    }

    .hero-actions {
      gap: 16px;
    }

    .main-title {
      font-size: clamp(36px, 8vw, 80px);
    }

    .subtitle {
      font-size: 24px;
    }

    .theme-control {
      padding: 12px 20px;
    }

    .theme-control-text {
      font-size: 12px;
      gap: 6px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .hero::before,
    .hero::after {
      animation: none !important;
      transform: none !important;
      filter: none !important;
    }
    
    .cta-button:hover {
      transform: scale(1.02);
    }
  }
</style>

<script>
  // Simple floating elements with hover interactions
  document.addEventListener('DOMContentLoaded', () => {
    // Smooth scroll for CTA button
    const ctaButton = document.querySelector('.cta-button');
    if (ctaButton) {
      ctaButton.addEventListener('click', (e) => {
        const href = ctaButton.getAttribute('href');
        if (href && href.startsWith('#')) {
          e.preventDefault();
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    }

    // Theme control button
    const themeControl = document.getElementById('themeControl');
    if (themeControl) {
      themeControl.addEventListener('click', () => {
        console.log('Theme control clicked');
        // Check if global function exists
        if (typeof (window as any).openThemeModal === 'function') {
          (window as any).openThemeModal();
        } else {
          console.log('openThemeModal not available, trying direct modal access');
          const modal = document.getElementById('themeModal');
          if (modal) {
            modal.classList.remove('hidden');
            // Update active theme option
            const currentTheme = document.documentElement.getAttribute('data-theme') || 'default';
            document.querySelectorAll('.theme-option').forEach(option => {
              const htmlOption = option as HTMLElement;
              htmlOption.classList.toggle('active', htmlOption.dataset.theme === currentTheme);
            });
          } else {
            console.error('Theme modal not found');
          }
        }
      });
    }

  });
</script>