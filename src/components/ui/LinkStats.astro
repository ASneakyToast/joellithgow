---
import { getCollection } from 'astro:content';

// Get all blog posts that have links
const allPosts = await getCollection('blog', ({ data }) => {
  return !data.draft && data.links && data.links.length > 0;
});

// Aggregate all links from all posts
const allLinks = allPosts.flatMap(post =>
  post.data.links.map(link => ({
    ...link,
    sourcePost: {
      title: post.data.title,
      slug: post.slug,
      publishDate: post.data.publishDate
    }
  }))
);

// Calculate statistics
const totalLinks = allLinks.length;
const totalPosts = allPosts.length;

// Get unique categories and their counts
const categoryStats = allLinks.reduce((acc, link) => {
  const category = link.category || 'Uncategorized';
  acc[category] = (acc[category] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

const topCategories = Object.entries(categoryStats)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 3);

// Get unique domains and their counts
const domainStats = allLinks.reduce((acc, link) => {
  try {
    const domain = new URL(link.url).hostname;
    acc[domain] = (acc[domain] || 0) + 1;
    return acc;
  } catch {
    acc['unknown'] = (acc['unknown'] || 0) + 1;
    return acc;
  }
}, {} as Record<string, number>);

const topDomains = Object.entries(domainStats)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 3);

const uniqueDomains = Object.keys(domainStats).length;

// Get all unique tags and their counts
const tagStats = allLinks.reduce((acc, link) => {
  if (link.tags) {
    link.tags.forEach(tag => {
      acc[tag] = (acc[tag] || 0) + 1;
    });
  }
  return acc;
}, {} as Record<string, number>);

const topTags = Object.entries(tagStats)
  .sort(([,a], [,b]) => b - a)
  .slice(0, 5);

// Recent activity (links added in the last 30 days)
const thirtyDaysAgo = new Date();
thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

const recentLinks = allLinks.filter(link =>
  new Date(link.dateAdded) >= thirtyDaysAgo
);

export interface Props {
  compact?: boolean;
  showDetails?: boolean;
}

const { compact = false, showDetails = true } = Astro.props;
---

<div class="link-stats" class:list={[{ compact }]}>
  {!compact && (
    <h2 class="stats-title">Link Collection Stats</h2>
  )}

  <div class="stats-grid">
    <!-- Overview Stats -->
    <div class="stat-section overview">
      <h3 class="section-title">Overview</h3>
      <div class="stat-cards">
        <div class="stat-card primary">
          <span class="stat-number">{totalLinks}</span>
          <span class="stat-label">total links</span>
        </div>
        <div class="stat-card secondary">
          <span class="stat-number">{totalPosts}</span>
          <span class="stat-label">source posts</span>
        </div>
        <div class="stat-card tertiary">
          <span class="stat-number">{uniqueDomains}</span>
          <span class="stat-label">unique domains</span>
        </div>
        <div class="stat-card accent">
          <span class="stat-number">{recentLinks.length}</span>
          <span class="stat-label">added this month</span>
        </div>
      </div>
    </div>

    {showDetails && (
      <>
        <!-- Top Categories -->
        <div class="stat-section categories">
          <h3 class="section-title">Top Categories</h3>
          <div class="stat-list">
            {topCategories.map(([category, count], index) => (
              <div class="stat-item" style={`--delay: ${index * 0.1}s`}>
                <span class="stat-name">{category}</span>
                <div class="stat-bar">
                  <div
                    class="stat-fill"
                    style={`width: ${(count / topCategories[0][1]) * 100}%`}
                  ></div>
                  <span class="stat-count">{count}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Top Domains -->
        <div class="stat-section domains">
          <h3 class="section-title">Most Linked Domains</h3>
          <div class="stat-list">
            {topDomains.map(([domain, count], index) => (
              <div class="stat-item" style={`--delay: ${index * 0.1}s`}>
                <span class="stat-name">{domain}</span>
                <div class="stat-bar">
                  <div
                    class="stat-fill"
                    style={`width: ${(count / topDomains[0][1]) * 100}%`}
                  ></div>
                  <span class="stat-count">{count}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Top Tags -->
        <div class="stat-section tags">
          <h3 class="section-title">Popular Tags</h3>
          <div class="tag-cloud">
            {topTags.map(([tag, count], index) => (
              <span
                class="tag-bubble"
                style={`--size: ${Math.min(count / topTags[0][1] * 1.5 + 0.8, 2)}; --delay: ${index * 0.1}s`}
              >
                #{tag}
                <span class="tag-count">{count}</span>
              </span>
            ))}
          </div>
        </div>
      </>
    )}
  </div>

  {!compact && (
    <div class="stats-footer">
      <p class="stats-note">
        Stats updated automatically from link collection posts.
        <a href="/links" class="browse-link">Browse all links â†’</a>
      </p>
    </div>
  )}
</div>

<style>
  .link-stats {
    background: var(--bg-secondary);
    border: 3px solid var(--accent-primary);
    padding: 2rem;
    transform: rotate(-0.5deg);
    box-shadow: 8px 8px 0px var(--accent-secondary);
    margin: 2rem 0;
    position: relative;
  }

  .link-stats.compact {
    padding: 1.5rem;
    transform: rotate(0deg);
    margin: 1rem 0;
  }

  .stats-title {
    font-size: 2rem;
    font-weight: 800;
    color: var(--accent-primary);
    text-transform: lowercase;
    margin-bottom: 2rem;
    text-align: center;
    transform: rotate(1deg);
  }

  .stats-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: 1fr;
  }

  .stat-section {
    position: relative;
  }

  .section-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--text-primary);
    text-transform: lowercase;
    margin-bottom: 1rem;
    transform: rotate(-1deg);
    display: inline-block;
    background: var(--accent-tertiary);
    color: var(--bg-dark);
    padding: 0.5rem 1rem;
    border: 2px solid var(--bg-dark);
  }

  /* Overview Stats */
  .overview .stat-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
  }

  .stat-card {
    background: var(--gradient-primary-light);
    border: 3px solid var(--accent-secondary);
    padding: 1rem;
    text-align: center;
    transform: rotate(1deg);
    box-shadow: 4px 4px 0px var(--accent-primary);
    transition: all 0.3s ease;
    animation: slideInUp 0.6s ease calc(var(--delay, 0s)) both;
  }

  .stat-card.primary {
    border-color: var(--accent-primary);
    background: var(--gradient-primary-light);
  }

  .stat-card.secondary {
    border-color: var(--accent-secondary);
    background: var(--gradient-secondary-light);
    transform: rotate(-1deg);
  }

  .stat-card.tertiary {
    border-color: var(--accent-tertiary);
    background: var(--gradient-tertiary-light, var(--gradient-primary-light));
  }

  .stat-card.accent {
    border-color: var(--accent-primary);
    background: var(--accent-tertiary);
    transform: rotate(-1deg);
  }

  .stat-card:hover {
    transform: rotate(0deg) scale(1.05);
    box-shadow: 6px 6px 0px var(--accent-primary);
  }

  .stat-number {
    display: block;
    font-size: 1.75rem;
    font-weight: 900;
    color: var(--text-primary);
    text-transform: lowercase;
  }

  .stat-label {
    display: block;
    font-size: 0.7rem;
    color: var(--text-secondary);
    text-transform: uppercase;
    font-weight: bold;
    margin-top: 0.25rem;
  }

  /* Stat Lists */
  .stat-list {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .stat-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    background: var(--gradient-primary-light);
    border: 2px solid var(--accent-secondary);
    transform: rotate(0.5deg);
    animation: slideInLeft 0.5s ease calc(var(--delay, 0s)) both;
    transition: all 0.3s ease;
  }

  .stat-item:nth-child(even) {
    transform: rotate(-0.5deg);
    background: var(--gradient-secondary-light);
  }

  .stat-item:hover {
    transform: rotate(0deg) scale(1.02);
    box-shadow: 3px 3px 0px var(--accent-primary);
  }

  .stat-name {
    font-weight: bold;
    color: var(--text-primary);
    min-width: 100px;
    font-size: 0.9rem;
  }

  .stat-bar {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    position: relative;
    background: var(--bg-primary);
    height: 24px;
    border: 2px solid var(--accent-tertiary);
    overflow: hidden;
  }

  .stat-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--accent-primary), var(--accent-secondary));
    transition: width 0.8s ease;
    min-width: 2px;
  }

  .stat-count {
    position: absolute;
    right: 0.5rem;
    font-size: 0.8rem;
    font-weight: bold;
    color: var(--text-primary);
    z-index: 2;
  }

  /* Tag Cloud */
  .tag-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    align-items: center;
  }

  .tag-bubble {
    background: var(--gradient-secondary-light);
    border: 2px solid var(--accent-secondary);
    padding: 0.5rem 0.75rem;
    font-size: calc(0.7rem * var(--size, 1));
    font-weight: bold;
    color: var(--text-primary);
    transform: rotate(calc(var(--delay, 0s) * 20deg - 2deg));
    animation: popIn 0.5s ease calc(var(--delay, 0s)) both;
    transition: all 0.3s ease;
    position: relative;
    cursor: default;
  }

  .tag-bubble:hover {
    transform: rotate(0deg) scale(1.1);
    box-shadow: 3px 3px 0px var(--accent-primary);
  }

  .tag-count {
    font-size: 0.6rem;
    color: var(--text-secondary);
    margin-left: 0.25rem;
  }

  .stats-footer {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 3px dashed var(--accent-tertiary);
    text-align: center;
  }

  .stats-note {
    color: var(--text-secondary);
    font-style: italic;
    margin: 0;
  }

  .browse-link {
    color: var(--accent-primary);
    text-decoration: none;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .browse-link:hover {
    color: var(--accent-secondary);
    transform: rotate(-1deg);
  }

  /* Animations */
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px) rotate(1deg);
    }
    to {
      opacity: 1;
      transform: translateY(0) rotate(1deg);
    }
  }

  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-20px) rotate(0.5deg);
    }
    to {
      opacity: 1;
      transform: translateX(0) rotate(0.5deg);
    }
  }

  @keyframes popIn {
    from {
      opacity: 0;
      transform: scale(0.5) rotate(calc(var(--delay, 0s) * 20deg - 2deg));
    }
    to {
      opacity: 1;
      transform: scale(1) rotate(calc(var(--delay, 0s) * 20deg - 2deg));
    }
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .link-stats {
      padding: 1.5rem;
      transform: rotate(0deg);
    }

    .stats-title {
      font-size: 1.5rem;
      transform: rotate(0deg);
    }

    .overview .stat-cards {
      grid-template-columns: repeat(2, 1fr);
      gap: 0.75rem;
    }

    .stat-card {
      transform: rotate(0deg);
      padding: 0.75rem;
    }

    .stat-card.secondary,
    .stat-card.accent {
      transform: rotate(0deg);
    }

    .stat-item {
      transform: rotate(0deg);
      flex-direction: column;
      align-items: stretch;
      gap: 0.5rem;
    }

    .stat-item:nth-child(even) {
      transform: rotate(0deg);
    }

    .stat-name {
      min-width: unset;
      text-align: center;
    }

    .tag-bubble {
      transform: rotate(0deg);
      font-size: 0.7rem;
    }

    .section-title {
      transform: rotate(0deg);
    }
  }

  @media (max-width: 480px) {
    .link-stats {
      padding: 1rem;
    }

    .overview .stat-cards {
      grid-template-columns: 1fr;
    }

    .stats-grid {
      gap: 1.5rem;
    }

    .tag-cloud {
      gap: 0.5rem;
    }

    .tag-bubble {
      font-size: 0.65rem;
      padding: 0.4rem 0.6rem;
    }
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .stat-bar {
      background: var(--bg-dark);
    }
  }
</style>