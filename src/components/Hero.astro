---
// Hero section component with floating elements
export interface Props {
  title?: string;
  subtitle?: string;
  description?: string;
  badgeText?: string;
  ctaText?: string;
  ctaHref?: string;
}

const {
  title = 'Joel Lithgow',
  subtitle = 'I help people think visually',
  description = 'I turn abstract ideas into clear visuals. Whether it\'s a complex process, a new product concept, or a data story - I help make the invisible visible so teams can understand and build together.',
  badgeText = 'creative technologist',
  ctaText = 'view my work',
  ctaHref = '#work'
} = Astro.props;

// Floating elements configuration
const floatingElements = [
  {
    id: 1,
    text: 'currently: building the future',
    class: 'floating-element-1'
  },
  {
    id: 2,
    text: 'status: open to opportunities',
    class: 'floating-element-2'
  },
  {
    id: 3,
    text: 'location: everywhere',
    class: 'floating-element-3'
  }
];
---

<section class="hero" aria-labelledby="hero-heading">
  <div class="hero-content">
    <div class="hero-badge" aria-label="Professional role">{badgeText}</div>
    <h1 id="hero-heading" class="main-title">{title}</h1>
    <p class="subtitle">{subtitle}</p>
    <div class="hero-description">
      {description}
    </div>
    <div class="hero-actions">
      <a href={ctaHref} class="cta-button" aria-describedby="work-cta-description">
        {ctaText}
      </a>
      <button 
        id="themeControl" 
        class="theme-control" 
        aria-label="Open theme selector"
        aria-expanded="false"
        aria-controls="themeModal"
        title="Press Ctrl+T to cycle themes">
        <div class="theme-control-text">
          <span aria-hidden="true">âš™</span>
          <span>themes</span>
        </div>
      </button>
      <div id="work-cta-description" class="sr-only">
        Explore my recent projects and case studies
      </div>
    </div>
  </div>
  
  <!-- Floating Status Elements -->
  <div class="floating-elements" aria-hidden="true">
    {floatingElements.map((element) => (
      <div class={`floating-element ${element.class}`}>
        {element.text}
      </div>
    ))}
  </div>
</section>

<style>
  .hero {
    padding: 80px 20px;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    position: relative;
    background: var(--bg-primary);
    overflow: hidden;
  }

  /* Clean Minimal Background Grid */
  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      /* Subtle vertical lines */
      linear-gradient(90deg, transparent 79px, var(--gradient-primary-light) 80px, var(--gradient-primary-light) 81px, transparent 82px),
      /* Subtle horizontal lines */
      linear-gradient(transparent 79px, var(--gradient-primary-light) 80px, var(--gradient-primary-light) 81px, transparent 82px);
    background-size: 80px 80px;
    background-position: 0 0;
    animation: gridBreathe 4s ease-in-out infinite, gridDrift 12s ease-in-out infinite;
    z-index: 1;
  }

  /* Minimal Accent Elements */
  .hero::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: 
      /* Single accent dot */
      radial-gradient(circle at 85% 15%, var(--gradient-secondary-medium) 3px, transparent 3px),
      /* Bold visible spiral */
      conic-gradient(from 0deg at 85% 15%, 
        transparent 0deg,
        var(--gradient-primary-medium) 45deg,
        transparent 90deg,
        var(--gradient-secondary-light) 135deg,
        transparent 180deg,
        var(--gradient-tertiary-light) 225deg,
        transparent 270deg,
        var(--gradient-primary-dim) 315deg,
        transparent 360deg);
    background-size: 
      100% 100%,
      1000px 1000px;
    background-position: 
      0 0,
      top right;
    background-repeat: no-repeat;
    opacity: calc(1 - var(--scroll-progress, 0) * 0.8);
    animation: accentPulse 8s ease-in-out infinite, accentFloat 12s ease-in-out infinite;
    z-index: 2;
  }

  /* Enhanced CSS Animations */
  @keyframes gridBreathe {
    0%, 100% { 
      opacity: 1;
      transform: scale(1);
    }
    50% { 
      opacity: 0.4;
      transform: scale(1.02);
    }
  }

  @keyframes gridDrift {
    0% { 
      background-position: 0 0;
    }
    25% { 
      background-position: 20px 20px;
    }
    50% { 
      background-position: 40px 0px;
    }
    75% { 
      background-position: 60px 40px;
    }
    100% { 
      background-position: 80px 80px;
    }
  }

  @keyframes accentPulse {
    0%, 100% { 
      filter: brightness(1) saturate(1);
      transform: scale(1);
    }
    50% { 
      filter: brightness(1.15) saturate(1.1);
      transform: scale(1.02);
    }
  }

  @keyframes accentFloat {
    0%, 100% { 
      transform: translateY(0) translateX(0) rotate(0deg);
    }
    25% { 
      transform: translateY(-8px) translateX(6px) rotate(1deg);
    }
    50% { 
      transform: translateY(-4px) translateX(-6px) rotate(-0.5deg);
    }
    75% { 
      transform: translateY(6px) translateX(8px) rotate(0.8deg);
    }
  }

  .hero-content {
    max-width: 1000px;
    margin: 0 auto;
    position: relative;
    z-index: 10;
  }

  .hero-badge {
    background: var(--accent-primary);
    color: var(--text-light);
    padding: 8px 16px;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 1px;
    border: 2px solid var(--bg-dark);
    transform: rotate(-2deg);
    display: inline-block;
    margin-bottom: 30px;
    font-weight: bold;
  }

  .main-title {
    font-size: clamp(48px, 10vw, 140px);
    font-weight: bold;
    line-height: 1;
    margin: 40px 0;
    color: var(--text-primary);
    text-shadow: 4px 4px 0px var(--accent-secondary);
    transform: skew(-1deg);
  }

  .subtitle {
    font-size: 32px;
    color: var(--text-secondary);
    margin-bottom: 50px;
    transform: rotate(1deg);
    display: inline-block;
  }

  .hero-description {
    font-size: 18px;
    line-height: 1.6;
    color: var(--text-primary);
    max-width: 600px;
    margin-bottom: 40px;
    background: var(--bg-secondary);
    padding: 30px;
    border: 3px solid var(--bg-dark);
    transform: rotate(-1deg);
    box-shadow: 6px 6px 0px var(--accent-tertiary);
  }

  .hero-actions {
    display: flex;
    gap: 30px;
    align-items: flex-start;
    flex-wrap: wrap;
  }

  .cta-button {
    background: var(--accent-primary);
    color: var(--text-light);
    padding: 15px 30px;
    text-decoration: none;
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    border: 3px solid var(--bg-dark);
    transition: all 0.3s ease;
    display: inline-block;
    transform: rotate(2deg);
    box-shadow: 4px 4px 0px var(--accent-secondary);
  }

  .cta-button:hover {
    transform: rotate(2deg) scale(1.05);
    box-shadow: 6px 6px 0px var(--accent-secondary);
  }

  .theme-control {
    background: white;
    color: var(--accent-primary);
    padding: 15px 30px;
    border: 3px solid var(--accent-primary);
    box-shadow: 4px 4px 0px var(--accent-secondary);
    font-family: inherit;
    transform: rotate(2deg);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .theme-control:hover {
    background: var(--accent-primary);
    color: white;
    transform: rotate(2deg) scale(1.05);
    box-shadow: 6px 6px 0px var(--accent-secondary);
  }

  .theme-control-text {
    font-size: 14px;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 1px;
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .theme-control-text span:first-child {
    font-size: 16px;
  }

  /* Floating Elements Container - Positioned within hero section */
  .floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 10;
  }

  .floating-element {
    position: absolute;
    pointer-events: none;
    background: var(--accent-tertiary);
    border: 2px solid var(--bg-dark);
    padding: 12px 16px;
    font-size: 11px;
    font-weight: bold;
    color: var(--text-primary);
    user-select: none;
    border-radius: 6px;
    box-shadow: 4px 4px 0px var(--accent-primary);
    max-width: 200px;
    word-wrap: break-word;
  }

  /* Fix contrast for themes with poor accent-tertiary/text-primary combinations */
  [data-theme="neon"] .floating-element,
  [data-theme="electric"] .floating-element {
    color: var(--bg-dark);
  }

  /* Individual element styling */
  .floating-element:nth-child(2) {
    background: var(--accent-secondary);
    color: var(--text-light);
    box-shadow: 4px 4px 0px var(--accent-tertiary);
  }

  .floating-element:nth-child(3) {
    background: var(--accent-primary);
    color: var(--text-light);
    box-shadow: 4px 4px 0px var(--accent-secondary);
  }

  /* Simple positioning within hero section - avoiding nav menu overlap */
  .floating-element-1 {
    top: 15%;
    right: 23%;
    transform: rotate(12deg);
  }

  .floating-element-2 {
    top: 60%;
    left: 4%;
    transform: rotate(-8deg);
  }

  .floating-element-3 {
    bottom: 15%;
    right: 8%;
    transform: rotate(15deg);
  }

  /* Screen reader only styles - sr-only class is defined globally in BaseLayout */

  /* Responsive design */
  @media (max-width: 768px) {
    .hero {
      padding: 60px 20px;
    }

    .hero::before {
      background-size: 60px 60px; /* Larger grid on mobile for better visibility */
    }
    
    /* Hide all floating chips on mobile */
    .floating-elements {
      display: none;
    }

    .hero-actions {
      gap: 16px;
    }

    .main-title {
      font-size: clamp(36px, 8vw, 80px);
    }

    .subtitle {
      font-size: 24px;
    }

    .hero-description {
      font-size: 16px;
      padding: 20px;
    }

    .theme-control {
      padding: 12px 20px;
    }

    .theme-control-text {
      font-size: 12px;
      gap: 6px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .hero::before,
    .hero::after {
      animation: none !important;
      transform: none !important;
      filter: none !important;
    }
    
    .cta-button:hover {
      transform: scale(1.02);
    }
    
    .floating-element {
      animation: none !important;
    }
    
    .floating-element:hover,
    .floating-element:focus {
      transform: scale(1.05) !important;
      animation: none !important;
    }
  }
</style>

<script>
  // Simple floating elements with hover interactions
  document.addEventListener('DOMContentLoaded', () => {
    // Smooth scroll for CTA button
    const ctaButton = document.querySelector('.cta-button');
    if (ctaButton) {
      ctaButton.addEventListener('click', (e) => {
        const href = ctaButton.getAttribute('href');
        if (href && href.startsWith('#')) {
          e.preventDefault();
          const targetId = href.substring(1);
          const targetElement = document.getElementById(targetId);
          
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        }
      });
    }

    // Theme control button
    const themeControl = document.getElementById('themeControl');
    if (themeControl) {
      themeControl.addEventListener('click', () => {
        console.log('Theme control clicked');
        // Check if global function exists
        if (typeof (window as any).openThemeModal === 'function') {
          (window as any).openThemeModal();
        } else {
          console.log('openThemeModal not available, trying direct modal access');
          const modal = document.getElementById('themeModal');
          if (modal) {
            modal.classList.remove('hidden');
            // Update active theme option
            const currentTheme = document.documentElement.getAttribute('data-theme') || 'default';
            document.querySelectorAll('.theme-option').forEach(option => {
              const htmlOption = option as HTMLElement;
              htmlOption.classList.toggle('active', htmlOption.dataset.theme === currentTheme);
            });
          } else {
            console.error('Theme modal not found');
          }
        }
      });
    }

    // Floating elements are now purely decorative - no interactions needed
  });
</script>