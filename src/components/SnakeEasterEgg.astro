---
// Snake Easter Egg Component - Handles the infinity symbol interaction and Snake game navigation
// Integrated with the main Astro site architecture
---

<style>
  /* Snake Easter Egg Styles */
  .snake-easter-egg {
    position: relative;
    display: inline-block;
  }

  .infinity-symbol {
    cursor: pointer;
    transition: all 0.3s ease;
    user-select: none;
    position: relative;
  }

  .infinity-symbol:hover {
    transform: scale(1.1);
    filter: drop-shadow(0 0 10px var(--accent-primary));
  }

  /* Slither animation */
  @keyframes slither {
    0% { transform: rotate(0deg) scale(1); }
    25% { transform: rotate(5deg) scale(1.05); }
    50% { transform: rotate(-5deg) scale(1.1); }
    75% { transform: rotate(3deg) scale(1.05); }
    100% { transform: rotate(0deg) scale(1); }
  }

  .infinity-symbol.slithering {
    animation: slither 0.5s ease-in-out;
  }

  /* Glow pulse animation for hints */
  @keyframes glow-pulse {
    0%, 100% { 
      filter: drop-shadow(0 0 5px var(--accent-primary)); 
    }
    50% { 
      filter: drop-shadow(0 0 15px var(--accent-primary)) 
             drop-shadow(0 0 25px var(--accent-secondary)); 
    }
  }

  .infinity-symbol.glowing {
    animation: glow-pulse 2s ease-in-out infinite;
  }

  /* Snake hint tooltip */
  .snake-hint {
    position: absolute;
    top: -40px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--bg-secondary);
    color: var(--accent-secondary);
    padding: 5px 10px;
    border-radius: 15px;
    font-size: 12px;
    white-space: nowrap;
    z-index: 1000;
    pointer-events: none;
    border: 1px solid var(--accent-secondary);
    opacity: 0;
    animation: fadeInOut 2s ease-in-out;
  }

  @keyframes fadeInOut {
    0% { opacity: 0; transform: translateX(-50%) translateY(10px); }
    20% { opacity: 1; transform: translateX(-50%) translateY(0px); }
    80% { opacity: 1; transform: translateX(-50%) translateY(0px); }
    100% { opacity: 0; transform: translateX(-50%) translateY(-10px); }
  }

  /* Flash effect for double-click navigation */
  .snake-flash {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: var(--accent-secondary);
    opacity: 0.7;
    z-index: 9999;
    pointer-events: none;
    animation: flash 0.3s ease-out;
  }

  @keyframes flash {
    0% { opacity: 0; }
    50% { opacity: 0.7; }
    100% { opacity: 0; }
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .snake-hint {
      font-size: 10px;
      padding: 3px 8px;
      top: -35px;
    }
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .infinity-symbol,
    .snake-hint,
    .snake-flash {
      animation: none !important;
      transition: none !important;
    }
  }
</style>

<!-- Client-side JavaScript -->
<script>
  class SnakeEasterEgg {
    constructor() {
      this.clickCount = 0;
      this.clickTimer = null;
      this.hoverTimer = null;
      this.infinitySymbol = null;
      this.init();
    }

    init() {
      // Wait for DOM to be ready and find the infinity symbol
      this.findInfinitySymbol();
      if (this.infinitySymbol) {
        this.setupEventListeners();
      }
    }

    findInfinitySymbol() {
      // Look for infinity symbols in various possible locations
      const selectors = [
        '.stat-number.infinity',
        '.infinity-symbol',
        '[data-infinity]',
        '.stat-value:contains("∞")',
        // Fallback: any element containing the infinity symbol
        '*:contains("∞")'
      ];

      for (const selector of selectors) {
        try {
          const element = document.querySelector(selector);
          if (element && (element.textContent.includes('∞') || element.innerHTML.includes('∞'))) {
            this.infinitySymbol = element;
            // Add our classes for styling
            element.classList.add('infinity-symbol', 'snake-easter-egg');
            break;
          }
        } catch (e) {
          // Continue to next selector if this one fails
        }
      }

      // If still not found, create a custom search
      if (!this.infinitySymbol) {
        const allElements = document.querySelectorAll('*');
        for (const element of allElements) {
          if (element.textContent.includes('∞') && element.children.length === 0) {
            this.infinitySymbol = element;
            element.classList.add('infinity-symbol', 'snake-easter-egg');
            break;
          }
        }
      }
    }

    setupEventListeners() {
      if (!this.infinitySymbol) return;

      // Click handler for navigation to Snake game
      this.infinitySymbol.addEventListener('click', (e) => {
        e.preventDefault();
        this.handleClick();
      });

      // Hover hint system
      this.infinitySymbol.addEventListener('mouseenter', () => {
        this.startHoverTimer();
      });

      this.infinitySymbol.addEventListener('mouseleave', () => {
        this.stopHoverTimer();
      });

      // Keyboard accessibility
      this.infinitySymbol.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.handleClick();
        }
      });

      // Make it focusable for accessibility
      if (!this.infinitySymbol.hasAttribute('tabindex')) {
        this.infinitySymbol.setAttribute('tabindex', '0');
      }

      // Add ARIA label for screen readers
      this.infinitySymbol.setAttribute('aria-label', 'Hidden Snake game - click to play');
      this.infinitySymbol.setAttribute('role', 'button');
    }

    handleClick() {
      this.clickCount++;
      
      // Clear existing timer
      if (this.clickTimer) {
        clearTimeout(this.clickTimer);
      }

      // Single click - navigate with animation
      if (this.clickCount === 1) {
        this.clickTimer = setTimeout(() => {
          this.navigateToSnake(false);
          this.clickCount = 0;
        }, 300);
      }

      // Double click - immediate navigation with special effect
      if (this.clickCount === 2) {
        clearTimeout(this.clickTimer);
        this.navigateToSnake(true);
        this.clickCount = 0;
      }
    }

    navigateToSnake(isDoubleClick = false) {
      // Add slither animation
      this.infinitySymbol.classList.add('slithering');

      if (isDoubleClick) {
        // Special double-click effect
        this.infinitySymbol.style.transform = 'scale(1.3)';
        
        setTimeout(() => {
          this.createFlashEffect();
          
          // Navigate after flash
          setTimeout(() => {
            this.goToSnakeGame();
          }, 300);
        }, 400);
      } else {
        // Single click - longer animation before navigation
        this.infinitySymbol.style.animation = 'slither 0.5s ease-in-out 2';
        
        setTimeout(() => {
          this.goToSnakeGame();
        }, 1000);
      }
    }

    createFlashEffect() {
      const flash = document.createElement('div');
      flash.className = 'snake-flash';
      document.body.appendChild(flash);

      // Clean up flash element
      setTimeout(() => {
        if (flash.parentNode) {
          flash.parentNode.removeChild(flash);
        }
      }, 350);
    }

    goToSnakeGame() {
      // Navigate to the Snake game page
      if (typeof window !== 'undefined') {
        window.location.href = '/snake';
      }
    }

    startHoverTimer() {
      this.hoverTimer = setTimeout(() => {
        this.showHint();
      }, 3000); // Show hint after 3 seconds of hovering
    }

    stopHoverTimer() {
      if (this.hoverTimer) {
        clearTimeout(this.hoverTimer);
      }
      
      // Reset animations
      this.infinitySymbol.classList.remove('glowing');
      this.infinitySymbol.style.animation = '';
    }

    showHint() {
      // Add glowing animation
      this.infinitySymbol.classList.add('glowing');
      
      // Create hint tooltip
      const hint = document.createElement('div');
      hint.className = 'snake-hint';
      hint.textContent = '🐍 Click me!';
      
      this.infinitySymbol.appendChild(hint);
      
      // Remove hint after animation
      setTimeout(() => {
        if (hint.parentNode) {
          hint.parentNode.removeChild(hint);
        }
      }, 2000);
    }
  }

  // Initialize the Snake Easter Egg
  const snakeEasterEgg = new SnakeEasterEgg();

  // Expose for debugging
  window.snakeEasterEgg = snakeEasterEgg;
</script>